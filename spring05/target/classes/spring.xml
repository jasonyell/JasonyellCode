<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <!--自动扫描开启 并设置扫描包范围-->
    <context:component-scan base-package="com.yell"/>
    <!--
        bean 对象的作用域
            1.单例作用域  singleton
                默认，bean 实例化后，会被放入——单例缓存池，每次获取都是同一个 bean 对象
            2，原形作用域  prototype
                每次获取都是新的 bean 对象
    -->
    <!--<bean id="accountDao" class="com.yell.dao.AccountDao" scope="prototype"/>-->


    <!--

        lazy-init的懒加载
            如果为true，表示容器启动时不会实例化bean对象，在程序调用才会实例化
            如果为false，表示容器启动时自动实例化bean对象，默认

        为什么要设置 lazy-init 为false ？
            1.可以提前知道潜在的配置问题
            2.实例化的bean对象存在单例缓存池中，使用时不需要在实例化bean对象，提高程序的运行效率
        Bean的生命周期：
            1.Bean的定义
                定义bean标签

            2.Bean对象的实例化
                如何知道bean什么时候实例化
                    方式1：
                        1.bean对象中定义实例化时调用的方法
                        2.bean标签设置init-method的方法，表示当bean对象实例化时会调用的方法
                    方式二：
                        1.bean对象去实现一个接口 org.springframework.bean.factory.InitializingBean 接口，并实现对应的方法，在bean对象被实例化时 自动调用
            3.Bean的使用：
                BeanFactory factory = new ClassPathXmlApplication("xxx.xml")
                factory.getBean("bean的标签id")
                ApplicationContext ac = new ClassPathXmlApplication("xxx.xml")
                ac.getBean("bean的标签id")
            4.Bean 的销毁
                1.bean对象中定义销毁时要执行的方法
                2.bean标签上通过 destroy-method指定， 当bean对象销毁时调用的方法
                3.获取Spring的上下文时，使用AbstractApplicationContext对象，调用它的close方法，关闭容器

    -->

    <!--<bean id="accountDao" class="com.yell.dao.AccountDao" init-method="init" lazy-init="true"/>-->

    <bean id="accountDao" class="com.yell.dao.AccountDao" destroy-method="destroy"/>


</beans>